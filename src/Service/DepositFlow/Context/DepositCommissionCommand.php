<?php

namespace App\Service\DepositFlow\Context;

use App\Entity\DepositFlow;
use App\Repository\DepositRepository;
use App\Service\DepositFlow\Type;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class DepositCommissionCommand extends Command
{
    /** @var DepositRepository */
    private $depositRepository;
    /** @var EntityManagerInterface */
    private $entityManager;

    const MIN_COMMISSION_VALUE = 50;
    const SIX_PERCENT_COMMISSION = 6;
    const SEVEN_PERCENT_COMMISSION = 7;

    public function __construct(
        EntityManagerInterface $entityManager,
        DepositRepository $depositRepository
    ) {
        $this->depositRepository = $depositRepository;
        $this->entityManager = $entityManager;
        parent::__construct();
    }

    protected function configure()
    {
        $this
            ->setName('commission:calculation')
            ->setAliases(['c:calc'])
            ->setDescription('Commission:calculation')
        ;
        parent::configure(); // TODO: Change the autogenerated stub
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int|void|null
     * @throws \Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $currentDate = new \DateTime();
        $deposits = $this->depositRepository->findAll();
        foreach ($deposits as $deposit) {
            $dateOpened = $deposit->getDateOpened();
            $dateDiff = $dateOpened->diff($currentDate);

            foreach ($deposit->getDepositFlows() as $operation) {
                $checkDateDiff = $currentDate->diff($operation->getDateCreated());
                if (!$checkDateDiff->days && $operation->getTypeId() == Type::DEPOSIT_COMMISSION) {
                    $output->writeln("<error>the commission has already been charged</error>");
                    continue 2;
                }
            }

            if ($dateDiff->m || $dateDiff->y) {
                $commission = $this->getCommissionForMonth((float)$deposit->getBalance());
            } else {
                $countDayPrevMonth = (new \DateTime())->modify("-1 month")->format("t");
                $commission = $this->getCommissionForMonth((float)$deposit->getBalance()) / $countDayPrevMonth * $dateDiff->d;
            }

            $balance = $deposit->getBalance() - $commission;

            $deposit->setBalance($balance);
            $this->entityManager->persist($deposit);

            $depositFlow = new DepositFlow();
            $depositFlow->setDeposit($deposit);
            $depositFlow->setTypeId(Type::DEPOSIT_COMMISSION);
            $depositFlow->setSum($commission);
            $depositFlow->setDateCreated(new \DateTime());
            $this->entityManager->persist($depositFlow);
        }

        $this->entityManager->flush();
        $output->writeln("<info>Commission calculation is over</info>");
    }

    public function getCommissionForMonth($balance)
    {
        if ($balance < 50) {
            return $balance;
        } elseif ($balance < 1000) {
            return self::MIN_COMMISSION_VALUE;
        } elseif ($balance >= 1000 && $balance < 10000) {
            return $balance / 100 * self::SIX_PERCENT_COMMISSION;
        } else {
            return $balance / 100 * self::SEVEN_PERCENT_COMMISSION;
        }
    }
}