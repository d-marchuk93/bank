<?php

namespace App\Service\DepositFlow\Context;

use App\Entity\DepositFlow;
use App\Repository\ClientRepository;
use App\Repository\CurrencyRepository;
use App\Repository\DepositFlowRepository;
use App\Repository\DepositRepository;
use App\Service\DepositFlow\Type;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class DepositAccrualsCommand extends Command
{
    /** @var EntityManagerInterface */
    private $entityManager;
    /** @var ClientRepository */
    private $clientRepository;
    /** @var CurrencyRepository */
    private $currencyRepository;
    /** @var DepositRepository */
    private $depositRepository;
    /** @var DepositFlowRepository */
    private $depositFlowRepository;

    const ONE_GROUP = 'one_group';
    const TWO_GROUP = 'two_group';
    const THREE_GROUP = 'three_group';

    public function __construct(
        EntityManagerInterface $entityManager,
        ClientRepository $clientRepository,
        CurrencyRepository $currencyRepository,
        DepositRepository $depositRepository,
        DepositFlowRepository $depositFlowRepository
    )
    {
        $this->entityManager = $entityManager;
        $this->clientRepository = $clientRepository;
        $this->currencyRepository = $currencyRepository;
        $this->depositRepository = $depositRepository;
        $this->depositFlowRepository = $depositFlowRepository;
        parent::__construct();
    }

    protected function configure()
    {
        $this
            ->setName('deposit:accruals:command')
            ->setAliases(['d:a:c'])
            ->setDescription('Deposit:accruals:command')
        ;
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {

        $isLastDayMonth = false;

        $currentDate = new \DateTime();
        if ($currentDate->format('t') == $currentDate->format('d')) {
            $isLastDayMonth = true;
        }

        $deposits = $this->depositRepository->findAll();
        foreach ($deposits as $deposit) {
            $dateOpened = $deposit->getDateOpened();
            $dateDiff = $dateOpened->diff($currentDate);
            $isDepositLastDayMonth = false;

            if ($deposit->getDateOpened()->format('t') == $deposit->getDateOpened()->format('d')) {
                $isDepositLastDayMonth = true;
            }

            if ((($isLastDayMonth && $isDepositLastDayMonth) || ($currentDate->format('d') == $dateOpened->format('d'))) && $dateDiff->days) {
                foreach ($deposit->getDepositFlows() as $operation) {
                    $checkDateDiff = $currentDate->diff($operation->getDateCreated());
                    if (!$checkDateDiff->days && $operation->getTypeId() == Type::DEPOSIT_ACCRUALS) {
                        $output->writeln("<error>deposit {$deposit->getId()} this month interest accrued</error>");
                        continue 2;
                    }
                }
                $accruals = $deposit->getBalance() / 100 * $deposit->getPercent();
                $balance = $deposit->getBalance() + $accruals;

                $deposit->setBalance($balance);
                $this->entityManager->persist($deposit);

                $depositFlow =  new DepositFlow();
                $depositFlow->setDeposit($deposit);
                $depositFlow->setTypeId(Type::DEPOSIT_ACCRUALS);
                $depositFlow->setSum($accruals);
                $depositFlow->setDateCreated($currentDate);
                $this->entityManager->persist($depositFlow);
                $output->writeln("<info>accrued amount of - {$accruals} {$deposit->getCurrency()->getValue()}</info>");
            } else {
                $output->writeln("<error>{$currentDate->format("Y-m-d")} - deposit number {$deposit->getId()} Interest will not be accrued</error>");
            }
        }

        $this->entityManager->flush();
        $output->writeln("<info>Accrued calculation is over</info>");
    }
}